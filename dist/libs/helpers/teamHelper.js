Object.defineProperty(exports,"__esModule",{value:true});exports.teamHelper=undefined;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _randomizer=require('../generator/randomizer');var _utils=require('../../utils');var _modules=require('../../config/modules');var _positions=require('../../config/positions');var teamHelper={createCleanTable:function createCleanTable(teams){var table={};teams.forEach(function(t){table[t.name]={name:t.name,played:0,won:0,lost:0,draw:0,points:0,goalsScored:0,goalsConceded:0};});return table;},teamsToObject:function teamsToObject(teams){var teamsObject={};teams.forEach(function(t){teamsObject[t.name]=t;});return teamsObject;},objectToTeamArray:function objectToTeamArray(teamObject){var teams=[];Object.keys(teamObject).forEach(function(k){teams.push(teamObject[k]);});return teams;},scorers:function scorers(team,goals){var orderedRoster=team.roster.sort(function(p1,p2){return _positions.extendedPositions[p1.position].weight<_positions.extendedPositions[p2.position].weight;});var possibleScorers=orderedRoster.filter(function(p){return p.position!=='GK';});var scorers=[];(0,_utils.range)(goals).forEach(function(_){if(_randomizer.randomizer.chance(80)){var _possibleScorers$rand=possibleScorers[_randomizer.randomizer.int(0,3)],name=_possibleScorers$rand.name,surname=_possibleScorers$rand.surname;scorers.push({name:name,surname:surname});}else{var _randomizer$pickOne=_randomizer.randomizer.pickOne(possibleScorers),_name=_randomizer$pickOne.name,_surname=_randomizer$pickOne.surname;scorers.push({name:_name,surname:_surname});}});return scorers;},averageSkill:function averageSkill(team){var avg=0;if(team.roster&&team.roster.length){var tot=0;team.roster.forEach(function(p){return tot+=p.skill;});avg=tot/team.roster.length;}return Math.round(avg);},averageAge:function averageAge(team){var avg=0;if(team.roster&&team.roster.length){var tot=0;team.roster.forEach(function(p){return tot+=p.age;});avg=tot/team.roster.length;}return Math.round(avg);},updateStatus:function updateStatus(team){var morale=0;if(team.roster&&team.roster.length){var tot=0;team.roster.forEach(function(p){return tot+=p.status.morale;});morale=Math.round(tot/team.roster.length);}return _extends({},team,{status:{morale:morale}});},isOffensive:function isOffensive(team){var module=team.coach?team.coach.module:'4-4-2';return _modules.extendedModules[module].character===1;},isDefensive:function isDefensive(team){var module=team.coach?team.coach.module:'4-4-2';return _modules.extendedModules[module].character===4;},canPlayModule:function canPlayModule(team){var module=team.coach?team.coach.module:'4-4-2';var roles=_modules.extendedModules[module].roles;var playersPerRole=this.playersPerRole(team);return roles.every(function(needed,index){return!(needed>0&&!(playersPerRole[_positions.positions[index]]>=needed));});},playersPerRole:function playersPerRole(team){var positionMapping={};_positions.positions.forEach(function(p){return positionMapping[p]=0;});team.roster.forEach(function(p){positionMapping[p.position]+=1;});return positionMapping;}};exports.teamHelper=teamHelper;