var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _libs=require('../../libs');var _misc=require('../../libs/misc');var _utils=require('../../utils');describe('playerHelper tests',function(){test('it calculates the value in a reasonable range',function(){var players=[{p:{skill:50,age:20},e:100000},{p:{skill:100,age:20},e:130000000}];players.forEach(function(t){var playerValue=_libs.playerHelper.calculateValue(t.p);expect(playerValue).toBeGreaterThan(t.e);});});test('it calculates the wage in a reasonable range',function(){var players=[{skill:50,age:20},{skill:100,age:20},{skill:100,age:30}];var expectedWages=[1000,1000000,1000000];var playersWithValue=players.map(function(p){var value=_libs.playerHelper.calculateValue(p);return _extends({},p,{value:value});});playersWithValue.forEach(function(p,index){var wage=_libs.playerHelper.calculateWage(p);expect(wage).toBeGreaterThan(expectedWages[index]);});});test('it leaves the morale as it is if no modifiers specified',function(){var player={status:{morale:10}};expect(_libs.playerHelper.updateStatus(player).status.morale).toBe(10);});test('it reduce the morale if decrease modifiers specified',function(){var player={status:{morale:100}};expect(_libs.playerHelper.updateStatus(player,{decreases:[{chance:100,value:90}]}).status.morale).toBe(10);});test('it uplift the morale if increase modifiers specified',function(){var player={status:{morale:90}};expect(_libs.playerHelper.updateStatus(player,{increases:[{chance:100,value:10}]}).status.morale).toBe(100);});test('it does not uplift the morale if increase modifiers specified and morale already 100',function(){var player={status:{morale:100}};expect(_libs.playerHelper.updateStatus(player,{increases:[{chance:100,value:10}]}).status.morale).toBe(100);});test('it does not reduce the morale if decrease modifiers specified and morale already 0',function(){var player={status:{morale:0}};expect(_libs.playerHelper.updateStatus(player,{decreases:[{chance:100,value:10}]}).status.morale).toBe(0);});test('it applies both uplift and decrease',function(){var player={status:{morale:80}};expect(_libs.playerHelper.updateStatus(player,{increases:[{chance:100,value:10}],decreases:[{chance:100,value:10}]}).status.morale).toBe(80);});});describe('teamHelper tests',function(){test('it calculates correctly the average skill',function(){var roster=(0,_utils.range)(5).map(function(_){return{skill:10};});expect(_libs.teamHelper.averageSkill({roster:roster})).toBe(10);});test('it calculates correctly the average age',function(){var roster=(0,_utils.range)(5).map(function(_){return{age:30};});expect(_libs.teamHelper.averageAge({roster:roster})).toBe(30);});test('it updates correctly the average team morale',function(){var roster=(0,_utils.range)(5).map(function(_){return{status:{morale:10}};});expect(_libs.teamHelper.updateStatus({roster:roster}).status.morale).toBe(10);});test('it gets a list of scorers',function(){var team={roster:[{position:'S'},{position:'S'},{position:'D'},{position:'D'},{position:'GK'}]};var goals=3;var scorers=_libs.teamHelper.scorers(team,goals);expect(scorers.length).toBe(goals);expect(scorers.filter(function(p){return p==='GK';}).length).toBe(0);});test('Method canPlayModule returns true if team can play its module',function(){var team={coach:{module:'4-4-2'},roster:[{position:'S'},{position:'S'},{position:'LM'},{position:'RM'},{position:'CM'},{position:'CM'},{position:'D'},{position:'D'},{position:'LD'},{position:'RD'},{position:'GK'}]};expect(_libs.teamHelper.canPlayModule(team)).toBe(true);});test('Method canPlayModule returns false if team cant play its module',function(){var team={coach:{module:'4-4-2'},roster:[{position:'S'},{position:'S'},{position:'D'},{position:'D'},{position:'GK'}]};expect(_libs.teamHelper.canPlayModule(team)).toBe(false);});test('it gets a list of number players per role',function(){var team={roster:[{position:'S'},{position:'S'},{position:'D'},{position:'D'},{position:'GK'}]};expect(_libs.teamHelper.playersPerRole(team)).toEqual({GK:1,S:2,D:2,CM:0,LD:0,LM:0,LS:0,RD:0,RM:0,RS:0});});});describe('leagueHelper tests',function(){test('it calculates correctly the new table and scorers given round results',function(){var teams=_libs.generator.teams(2);var fixture=_libs.fixtureGenerator.generate(teams);var matches=fixture.pop().matches;var results=_libs.round.simulate(matches,teams);var newTable=_libs.leagueHelper.parseRoundResults(results,_libs.teamHelper.createCleanTable(teams));var scorer1=_libs.leagueHelper.parseScorers(results,{});Object.keys(newTable).forEach(function(k){expect(newTable[k]).toEqual({name:expect.any(String),played:expect.any(Number),won:expect.any(Number),lost:expect.any(Number),draw:expect.any(Number),points:expect.any(Number),goalsConceded:expect.any(Number),goalsScored:expect.any(Number)});});Object.keys(scorer1).forEach(function(k){expect(scorer1[k]).toEqual({goals:expect.any(Number),team:expect.any(String),player:expect.anything()});});var matches2=fixture.pop().matches;var results2=_libs.round.simulate(matches2,teams);var secondRoundTable=_libs.leagueHelper.parseRoundResults(results2,newTable);Object.keys(secondRoundTable).forEach(function(k){expect(secondRoundTable[k]).toEqual({name:expect.any(String),played:expect.any(Number),won:expect.any(Number),lost:expect.any(Number),draw:expect.any(Number),points:expect.any(Number),goalsConceded:expect.any(Number),goalsScored:expect.any(Number)});});var scorer2=_libs.leagueHelper.parseScorers(results2,scorer1);Object.keys(scorer2).forEach(function(k){expect(scorer2[k]).toEqual({goals:expect.any(Number),team:expect.any(String),player:expect.anything()});});});test('it update correctly the new status given the result',function(){var teams=_libs.generator.teams(2);var fixture=_libs.fixtureGenerator.generate(teams);var matches=fixture.pop().matches;var results=_libs.round.simulate(matches,teams);var updatedTeams=_libs.leagueHelper.updateStatus(results,_libs.teamHelper.teamsToObject(teams));expect(updatedTeams.length).toBe(2);});});describe('filters and sorts',function(){test('it filters teams by skill average',function(){var generatedTeams=_libs.generator.teams(3);var teams=generatedTeams.sort(_misc.byTeamSkillAvgDesc);var previousSkillAvg=110;teams.forEach(function(t){var currentSkillAvg=_libs.teamHelper.averageSkill(t);expect(currentSkillAvg).toBeLessThanOrEqual(previousSkillAvg);previousSkillAvg=currentSkillAvg;});});});